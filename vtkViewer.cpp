#pragma once

#include <typeinfo>
#include <fstream>

#define CELL_TYPE_TRIANGLE 5
#define CELL_TYPE_RECTANGLE 9

using namespace std;

template<typename M,typename N>
class VTKViewer
{

    ofstream out;

public:

    VTKViewer(const char* filename)
    {
        out.open(filename,std::fstream::out);
    }

    void printInVTK(M pointsNumber,const FixedSizeMeshContainer<M>& coords,const VariableSizeMeshContainer<N>& topoEN)
    {
        out << "# vtk DataFile Version 2.0" << endl;
        out << "Generated by Maxkile" << endl;
        out << "ASCII" << endl;
        out << "DATASET UNSTRUCTURED_GRID" << endl;
        out << endl;
        if (!strcmp(typeid(pointsNumber).name(),"i"))
        {
            out << "POINTS " << pointsNumber << " " << "int" << endl;
        }
        else if (!strcmp(typeid(pointsNumber).name(),"d"))
        {
            out << "POINTS " << pointsNumber << " " << "float" << endl;
        }
        coords.printContainer(out); 

        out << "CELLS " << topoEN.getBlockNumber() << " " << topoEN.getTotalSize() << endl;

        topoEN.printContainer(out);

        out << "CELLS_TYPES " << topoEN.getBlockNumber() << endl;

        for (int i = 0; i < topoEN.getBlockNumber();++i)
        {
            switch(topoEN.getBlockSize(i))
            {
                case 3: out << CELL_TYPE_TRIANGLE << " ";
                case 4: out << CELL_TYPE_RECTANGLE << " ";
            }
        }

        out << endl;

        out << "POINT_DATA " << pointsNumber << endl;
    }

    ~VTKViewer()
    {
        out.close();
    }
};
